@using RenewUp.Rpg.Serviço.Blazor.Componentes.Carregamento
@using System.Threading

<IndicadorDeCarregamento @ref="@indicadorDeCarregamento" @bind-Processando="@Desabilitado"
                         @bind-CancellationTokenSource="@CancellationTokenSource">
    <button @onclick="@AoClicarInterno" disabled="@Desabilitado">@ChildContent</button>
</IndicadorDeCarregamento>

@code {
    private IndicadorDeCarregamento indicadorDeCarregamento;
    private ObservadorDeValor<bool> desabilitado;
    private ObservadorDeValor<CancellationTokenSource> cancellationTokenSource;

    [Parameter]
    public Action AoClicar { get; set; }
    [Parameter]
    public Func<CancellationToken, Task> TarefaDeAoClicar { get; set; }
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public bool Desabilitado { get => desabilitado.Valor; set => desabilitado.Valor = value; }
    [Parameter]
    public EventCallback<bool> DesabilitadoChanged
    {
        get => desabilitado.ValorChanged; set => desabilitado.ValorChanged = value;
    }
    [Parameter]
    public CancellationTokenSource CancellationTokenSource
    {
        get => cancellationTokenSource.Valor; set => cancellationTokenSource.Valor = value;
    }
    [Parameter]
    public EventCallback<CancellationTokenSource> CancellationTokenSourceChanged
    {
        get => cancellationTokenSource.ValorChanged; set => cancellationTokenSource.ValorChanged = value;
    }

    private async void AoClicarInterno()
    {
        if (AoClicar is not null)
            await indicadorDeCarregamento.Executar(_ =>
            {
                AoClicar();
                return Task.CompletedTask;
            });
        if (TarefaDeAoClicar is not null)
            await indicadorDeCarregamento.Executar(TarefaDeAoClicar);
    }
}